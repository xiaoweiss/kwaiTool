name: 构建Windows应用

on:
  push:
    branches: [main, master]
    tags:
      - "v*" # 匹配所有版本标签
  pull_request:
    branches: [main, master]
  workflow_dispatch: # 允许手动触发

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      PLAYWRIGHT_BROWSERS_PATH: 0 # 强制打包浏览器
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==5.13.0 pillow==10.0.0
          pip install requests playwright pytz tzlocal schedule

          # 显式安装UI框架 (根据项目需要选择)
          pip install pyqt5

          # 不安装Playwright浏览器，因为用户会自己选择浏览器
          # python -m playwright install chromium
          # python -m playwright install-deps chromium

      - name: 打印环境信息
        run: |
          python --version
          pip list
          echo "当前目录内容:"
          dir

      - name: 清理旧构建
        run: |
          if (Test-Path -Path "build") { Remove-Item -Path "build" -Recurse -Force }
          if (Test-Path -Path "dist") { Remove-Item -Path "dist" -Recurse -Force }

      - name: 构建应用
        run: |
          echo "检查当前目录内容..."
          dir

          echo "检查main.py文件是否存在..."
          if (Test-Path -Path "main.py") { 
            echo "main.py 文件存在，直接使用main.py构建应用" 
          } 
          else { 
            echo "错误: main.py 文件不存在!" 
            exit 1
          }

          # 检查图标文件是否存在
          $ICON_PARAM = ""
          if (Test-Path -Path "app_icon.ico") {
            echo "图标文件存在，将使用app_icon.ico"
            $ICON_PARAM = "--icon=app_icon.ico"
          } else {
            echo "图标文件不存在，将使用默认图标"
          }

          # 检查数据文件是否存在
          $DATA_PARAM = ""
          if (Test-Path -Path "curl_config.json") {
            echo "配置文件存在，将添加curl_config.json"
            $DATA_PARAM = "--add-data `"curl_config.json;.`""
          } else {
            echo "配置文件不存在，将不添加额外数据文件"
          }

          echo "开始构建应用..."
          # 构建基本命令 - 优化打包大小
          $BUILD_CMD = "pyinstaller --name `"快手账号管理工具`" --onefile --windowed --clean"

          # 设置环境变量，防止Playwright自动下载浏览器
          $Env:PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD = 1

          # 排除不必要的大型模块和包
          $BUILD_CMD += " --exclude-module matplotlib"
          $BUILD_CMD += " --exclude-module pandas"
          $BUILD_CMD += " --exclude-module PIL"
          $BUILD_CMD += " --exclude-module numpy"
          # 不排除tkinter，因为应用依赖它
          # $BUILD_CMD += " --exclude-module tkinter"
          $BUILD_CMD += " --exclude-module PyQt6"
          $BUILD_CMD += " --exclude-module PySide6"
          # 排除Selenium相关模块
          $BUILD_CMD += " --exclude-module selenium"
          $BUILD_CMD += " --exclude-module webdriver_manager"

          # 进一步优化体积的选项
          $BUILD_CMD += " --strip"  # 去除符号表和调试信息
          $BUILD_CMD += " --collect-submodules playwright"  # 只收集实际使用的playwright子模块

          # 更精细地排除大型库中不需要的部分
          $BUILD_CMD += " --exclude-module unittest"
          $BUILD_CMD += " --exclude-module test"
          $BUILD_CMD += " --exclude-module distutils" 

          # 使用noupx避免UPX压缩导致的问题
          $BUILD_CMD += " --noupx"

          # 添加可选参数
          if ($ICON_PARAM) {
            $BUILD_CMD += " $ICON_PARAM"
          }
          if ($DATA_PARAM) {
            $BUILD_CMD += " $DATA_PARAM"
          }

          # 添加必需的隐藏导入 - 仅保留必要的，移除Selenium相关的导入
          $BUILD_CMD += " --hidden-import curl_helper"
          $BUILD_CMD += " --hidden-import requests"
          $BUILD_CMD += " --hidden-import playwright.sync_api"
          $BUILD_CMD += " --hidden-import tkinter"
          $BUILD_CMD += " --hidden-import tkinter.filedialog"

          $BUILD_CMD += " main.py"

          echo "执行构建命令: $BUILD_CMD"
          Invoke-Expression $BUILD_CMD

          echo "构建完成，检查dist目录:"
          dir dist
          echo "检查可执行文件大小:"
          Get-Item dist/快手账号管理工具.exe | Select-Object Name, Length, @{Name="SizeInMB";Expression={"{0:N2} MB" -f ($_.Length / 1MB)}}

      - name: 打包构建产物
        run: |
          cd dist
          # 使用英文文件名以避免编码问题
          powershell Compress-Archive -Path "快手账号管理工具.exe" -DestinationPath "KwaiAccountManager-Windows.zip"
          cd ..

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: KwaiAccountManager-Windows
          path: dist/KwaiAccountManager-Windows.zip
          retention-days: 7

  # 创建发布版本（仅在打标签时）
  create-release:
    needs: [build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: 获取Windows构建产物
        uses: actions/download-artifact@v4
        with:
          name: KwaiAccountManager-Windows
          path: ./

      - name: 创建Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            KwaiAccountManager-Windows.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
