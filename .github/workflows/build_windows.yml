name: 构建Windows应用

on:
  push:
    branches: [main, master]
    tags:
      - "v*" # 匹配所有版本标签
  pull_request:
    branches: [main, master]
  workflow_dispatch: # 允许手动触发

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      PLAYWRIGHT_BROWSERS_PATH: 0 # 强制打包浏览器
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==5.13.0 pillow==10.0.0
          pip install requests playwright selenium pytz tzlocal schedule

          # 显式安装UI框架 (根据项目需要选择)
          pip install pyqt5

          # 显式安装Playwright浏览器
          python -m playwright install chromium
          python -m playwright install-deps chromium

      - name: 打印环境信息
        run: |
          python --version
          pip list
          echo "当前目录内容:"
          dir

      - name: 清理旧构建
        run: |
          if (Test-Path -Path "build") { Remove-Item -Path "build" -Recurse -Force }
          if (Test-Path -Path "dist") { Remove-Item -Path "dist" -Recurse -Force }

      - name: 构建应用
        run: |
          echo "检查当前目录内容..."
          dir

          echo "检查main.py文件是否存在..."
          if (Test-Path -Path "main.py") { 
            echo "main.py 文件存在，直接使用main.py构建应用" 
          } 
          else { 
            echo "错误: main.py 文件不存在!" 
            exit 1
          }

          echo "开始构建应用..."
          # 直接使用main.py构建应用，添加必要的隐藏导入和数据文件
          pyinstaller --name "快手账号管理工具" --onefile --windowed --icon=app_icon.ico `
            --hidden-import selenium.webdriver.common.by `
            --hidden-import selenium.webdriver.support.ui `
            --hidden-import selenium.webdriver.support.expected_conditions `
            --hidden-import selenium.webdriver.chrome.options `
            --hidden-import selenium.webdriver.common.action_chains `
            --hidden-import websockets `
            --hidden-import schedule `
            --hidden-import tzlocal `
            --hidden-import pytz `
            --hidden-import curl_helper `
            --hidden-import requests `
            --hidden-import playwright `
            --hidden-import playwright.sync_api `
            --hidden-import tkinter.filedialog `
            --add-data "curl_config.json;." `
            main.py

          echo "构建完成，检查dist目录:"
          dir dist

      - name: 打包构建产物
        run: |
          cd dist
          powershell Compress-Archive -Path "快手账号管理工具.exe" -DestinationPath "快手账号管理工具-Windows.zip"
          cd ..

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: 快手账号管理工具-Windows
          path: dist/快手账号管理工具-Windows.zip
          retention-days: 7

  # 创建发布版本（仅在打标签时）
  create-release:
    needs: [build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: 获取Windows构建产物
        uses: actions/download-artifact@v4
        with:
          name: 快手账号管理工具-Windows
          path: ./

      - name: 创建Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            快手账号管理工具-Windows.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
